{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","onClick","handler","image","className","src","alt","App","state","clicked","carddata","getRandomInt","min","max","Math","ceil","floor","random","shuffle","arr","console","log","length","n","i","j","temp","handleClick","data","includes","alert","document","location","reload","push","setState","tempcarddata","style","display","this","map","value","index","key","React","Component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+kBAceA,MATf,SAAeC,GACX,OACI,yBAAKC,QAAS,kBAAID,EAAME,QAAQF,EAAMG,SAClC,yBAAKC,UAAU,MAAMC,IAAML,EAAMG,MAAQG,IAAKN,EAAMG,U,OC4EjDI,E,2MA5EbC,MAAM,CACJC,QAAQ,GACRC,Y,EAIFC,aAAe,SAACC,EAAKC,GAGnB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,G,EAEnDM,QAAU,SAACC,GACTC,QAAQC,IAAIF,EAAIG,QAEhB,IADA,IAAIC,EAAIJ,EAAIG,OACJE,EAAE,EAAIA,EAAED,EAAIC,IAAK,CACvB,IAAIC,EAAI,EAAKd,aAAa,EAAEY,GAExBG,EAAOP,EAAIK,GACfL,EAAIK,GAAKL,EAAIM,GACbN,EAAIM,GAAKC,EAIX,OAAOP,G,EAWTQ,YAAc,SAACC,GACbR,QAAQC,IAAIO,GACZ,IAAIF,EAAM,EAAKlB,MAAMC,QAElBiB,EAAKG,SAASD,IACfR,QAAQC,IAAI,qCACZS,MAAM,gDACNC,SAASC,SAASC,UAEmB,IAA9B,EAAKzB,MAAMC,QAAQa,SAC1BQ,MAAM,yCACNC,SAASC,SAASC,UAKpBP,EAAKQ,KAAKN,GACV,EAAKO,SAAS,CAAC1B,QAAQiB,IAAO,kBAAIN,QAAQC,IAAI,EAAKb,UACrD,IAAM4B,EAAe,EAAKlB,QAAQ,EAAKV,MAAME,UAC7CU,QAAQC,IAAI,EAAKb,MAAME,UACvBU,QAAQC,IAAIe,GAEZ,EAAKD,SAAS,CAACzB,SAAS0B,K,wEAGf,IAAD,OACR,OACE,yBAAKhC,UAAU,MAAMiC,MAAO,CAACC,QAAS,SACxC,+BAAKC,KAAK/B,MAAMC,QAAQa,QAGpBiB,KAAK/B,MAAME,SAAS8B,KAAI,SAACC,EAAMC,GAC7B,OAAO,kBAAC,EAAD,CAAMvC,MAAQsC,EAAMtC,MAAOwC,IAAKD,EAAOxC,QAAS,EAAKyB,sB,GApElDiB,IAAMC,WCMJC,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASqB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98534539.chunk.js","sourcesContent":["import React from \"react\";\r\nimport path from \"path\"\r\nimport './Card.css'\r\n\r\n//function Card ({image,handler}){\r\nfunction Card (props){\r\n    return(\r\n        <div onClick={()=>props.handler(props.image)}>\r\n            <img className=\"pic\" src={ props.image } alt={props.image}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport './App.css';\nimport Card from \"./components/Card\"\nimport carddata from \"./card.json\"\n\n\nclass App extends React.Component {\n  \n  state={\n    clicked:[],\n    carddata\n    // should I store wins and loses here?\n  }\n\n  getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; \n  }\n  shuffle = (arr) => {\n    console.log(arr.length)\n    var n = arr.length;              \n    for(var i=0 ; i<n ; i++) {\n      var j = this.getRandomInt(0,n);       // Get random of [0, n-1]\n      \n      var temp = arr[i];             \n      arr[i] = arr[j];\n      arr[j] = temp;\n\n    }\n    \n    return arr;                     \n  }\n  \n\n  // shuffle=()=>{}\n  // swap=(a,b)=>{\n  //   temp=a\n  //   a=b\n  //   b=temp\n  // }\n\n  handleClick = (data) => {\n    console.log(data)\n    let temp= this.state.clicked\n\n    if(temp.includes(data)){\n      console.log(\"------all ready been clicked-----\")//loss logic\n      alert(\"That has already been selected! GAME OVER!!!\")\n      document.location.reload();\n\n    }else if(this.state.clicked.length === 8) {\n      alert(\"YOU WON!! You must know how to count!\")\n      document.location.reload();\n    }\n\n    //WIN CONDITION HERE!-- temp.length==data.length?WIN:keep playing\n\n    temp.push(data)\n    this.setState({clicked:temp}, ()=>console.log(this.state))\n  const tempcarddata = this.shuffle(this.state.carddata);\n  console.log(this.state.carddata)\n  console.log(tempcarddata)\n  \n  this.setState({carddata:tempcarddata});\n  }\n\n  render(){\n  return (\n    <div className=\"red\" style={{display: \"flex\"}}>\n  <p>#{this.state.clicked.length}</p>\n  \n      {\n      this.state.carddata.map((value,index)=>{\n        return <Card image= {value.image} key={index} handler={this.handleClick}/>\n      }\n      )}\n\n\n    </div>\n  );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}